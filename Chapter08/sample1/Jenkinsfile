pipeline {
  agent {
    kubernetes {
      // From assignment: dlambrig/umlS24/blob/main/week8/Jenkins.declarative.
      yaml """
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: gradle
            image: gradle
            command:
            - sleep
            args:
            - 99d
            volumeMounts:
            - name: shared-storage
              mountPath: /mnt        
          - name: kaniko
            image: gcr.io/kaniko-project/executor:debug
            command:
            - sleep
            args:
            - 9999999
            volumeMounts:
            - name: shared-storage
              mountPath: /mnt
            - name: kaniko-secret
              mountPath: /kaniko/.docker
          restartPolicy: Never
          volumes:
          - name: shared-storage
            persistentVolumeClaim:
              claimName: jenkins-pv-claim
          - name: kaniko-secret
            secret:
                secretName: dockercred
                items:
                - key: .dockerconfigjson
                  path: config.json
      """
    }
  }
  
  stages {

    stage('Checkout code and prepare environment.') {
      steps {
        echo "AUTHOR NOTE: Checking out juggergnat/Continuous-Delivery repo."
        git url: 'https://github.com/dlambrig/Continuous-Delivery-with-Docker-and-Jenkins-Second-Edition.git'
        sh """
          cd Chapter08/sample1
          chmod +x gradlew
        """
      }
    }

    // Not from assignment. Personal sanity check.
    stage('Run nothing here. There is no MASTER branch on juggergnat/UML-SP2024-MSIT.5330-031.') {
      when { branch 'master' }
      steps {
        echo 'AUTHOR NOTE: This should not run.'
      }
    }

    // From assignment: The CodeCoverage test should only run on the main branch.
    stage('Run pipeline against a gradle project - test MAIN - Code coverage.') {
      when { branch 'main' }
      steps {
        echo 'AUTHOR NOTE: Runs when branch main exists in juggergnat/UML-SP2024-MSIT.5330-031.'
        echo 'Code coverage test on main branch.'
        sh """
          cd Chapter08/sample1;
          ./gradlew jacocoTestReport
          ./gradlew jacocoTestCoverageVerification
        """
      }
    }

    // From assignment: All other tests should run in the feature and playground branches.
    stage('Run pipeline against a gradle project - test OTHER - Code check.') {
      when {
        anyOf {
          branch 'feature'
          branch 'playground'
        }
      }
      steps {
        echo 'AUTHOR NOTE: Runs when branch feature or playground exists in juggergnat/UML-SP2024-MSIT.5330-031.'
        echo 'Unit test and static code analysis on non-main branch.'
        sh """
          cd Chapter08/sample1; 
          ./gradlew test
          ./gradlew checkstyleMain
        """
      }
    }
  }

  post {

    always   {
      echo 'FUN FACT: The always conditional in post always runs first before other conditionals.'
      script {
        if ( env.BRANCH_NAME == 'main' ) {
          // Code coverage test report.
          // publishHTML (target: [
          //   reportDir: 'Chapter08/sample1/build/reports/tests/test',
          //   reportFiles: 'index.html',
          //   reportName: "JaCoCo CC Report"
          // ])
        }
        if (env.BRANCH_NAME == 'feature' || env.BRANCH_NAME == 'playground') {
          // Unit test and static code analysis test report.
          // publishHTML (target: [
          //   reportDir: 'Chapter08/sample1/build/reports/checkstyle',
          //   reportFiles: 'main.html',
          //   reportName: "JaCoCo Checkstyle"
          // ])
        }
      }
    }

    // From assignment: Container should only create on success.
    success  {
      script {

        // From assignment: Container should only create on main or feature, not playground.  
        // From assignment: Container name is repository/image:version depending on branch.
        env.CONTAINER_NAME = ''
        env.CONTAINER_REPO = 'juggergnat'
        if ( env.BRANCH_NAME == 'main' )       { env.CONTAINER_NAME = 'calculator:1.0' }
        if ( env.BRANCH_NAME == 'feature' )    { env.CONTAINER_NAME = 'calculator-feature:0.1' }
        if ( env.BRANCH_NAME == 'playground' ) { echo "Create no container." }

        if ( "${CONTAINER_NAME}" ) {

          // From assignment: Container build when conditions are met.
          container('gradle') {
            sh '''
              cd Chapter08/sample1
              sed -i 's/minimum = 0.2/minimum = 0.1/' build.gradle
              sed -i '/checkstyle {/,/}/d' build.gradle 
              sed -i '/checkstyle/d' build.gradle 
              cat build.gradle
              chmod +x gradlew
              ./gradlew build
              mv ./build/libs/calculator-0.0.1-SNAPSHOT.jar /mnt
            '''
          }

          // From assignment: Container communicates build to Docker Hub.
          // From assignment: Container name defined using variables set above.
          container('kaniko') {
            sh '''
              echo 'FROM openjdk:8-jre' > Dockerfile
              echo 'COPY ./calculator-0.0.1-SNAPSHOT.jar app.jar' >> Dockerfile
              echo 'ENTRYPOINT ["java", "-jar", "app.jar"]' >> Dockerfile
              mv /mnt/calculator-0.0.1-SNAPSHOT.jar .
              /kaniko/executor --context `pwd` --destination ${CONTAINER_REPO}/${CONTAINER_NAME}
            '''
          }
        }
      }
      echo 'End: tests pass!'
    }
    failure  { echo 'End: tests fail!' }
    unstable { echo 'End: run is unstable!' }
    changed  { echo 'End: pipeline run changed!' }
  }
}
