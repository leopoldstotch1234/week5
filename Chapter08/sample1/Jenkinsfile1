pipeline {
  agent {
    kubernetes {
      yaml """
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: gradle
            image: gradle
            command:
            - sleep
            args:
            - 99d
            volumeMounts:
            - name: shared-storage
              mountPath: /mnt        
          - name: kaniko
            image: gcr.io/kaniko-project/executor:debug
            command:
            - sleep
            args:
            - 9999999
            volumeMounts:
            - name: shared-storage
              mountPath: /mnt
            - name: kaniko-secret
              mountPath: /kaniko/.docker
          restartPolicy: Never
          volumes:
          - name: shared-storage
            persistentVolumeClaim:
              claimName: test2
          - name: kaniko-secret
            secret:
                secretName: dockercred
                items:
                - key: .dockerconfigjson
                  path: config.json
      """
    }
  }
  
  stages {

    stage('Checkout code and prepare environment.') {
      steps {
	container('gradle') {
        git url: 'https://github.com/leopoldstotch1234/week5.git'
        sh """
          cd Chapter08/sample1
	  echo "151.101.0.215 repo.maven.apache.org" | tee -a /etc/hosts
          chmod +x gradlew
        """
      }
    }
}
    stage('Maser Code coverage') {
      when {branch 'master'}
      steps {
        echo 'Code coverage test on main branch.'
        sh """
          cd Chapter08/sample1;
          ./gradlew jacocoTestReport
          ./gradlew jacocoTestCoverageVerification
        """
      }
    }

    stage('All - Code check.') {
     when {
        anyOf {
          branch 'feature'
          branch 'playground'
        }
      }{
      steps {
        echo 'Running Checkstyle on env.BRANCH_NAM'
        sh """
          cd Chapter08/sample1; 
          ./gradlew test
          ./gradlew checkstyleMain
        """
      }
    }}
  }


  post {
    always   {
      script {
        if ( env.BRANCH_NAME == 'master' ) {
	 publishHTML (target: [
         reportDir: 'Chapter08/sample1/build/reports/tests/test',
         reportFiles: 'index.html',
         reportName: "JaCoCo CC Report"
         ])
        }
        if (env.BRANCH_NAME == 'feature' || env.BRANCH_NAME == 'playground') {
          publishHTML (target: [
          reportDir: 'Chapter08/sample1/build/reports/checkstyle',
          reportFiles: 'main.html',
          reportName: "JaCoCo Checkstyle"
           ])
        }
      }
    }

    success  {
      script {
        if ( env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'feature' ) {
		env.IMAGE = ''
        	if ( env.BRANCH_NAME == 'master' )       { 
		  env.IMAGE = 'calculator:1.0' 
		}
        	if ( env.BRANCH_NAME == 'feature' )    { 
		  env.IMAGE = 'calculator-feature:0.1' 
		}

          // From assignment: Container build when conditions are met.
          container('gradle') {
            sh '''
              cd Chapter08/sample1
              sed -i 's/minimum = 0.2/minimum = 0.1/' build.gradle
              sed -i '/checkstyle {/,/}/d' build.gradle 
              sed -i '/checkstyle/d' build.gradle 
              cat build.gradle
              chmod +x gradlew
              ./gradlew build
              mv ./build/libs/calculator-0.0.1-SNAPSHOT.jar /mnt
            '''
          }

          // From assignment: Container communicates build to Docker Hub.
          // From assignment: Container name defined using variables set above.
          container('kaniko') {
            sh '''
              echo 'FROM openjdk:8-jre' > Dockerfile
              echo 'COPY ./calculator-0.0.1-SNAPSHOT.jar app.jar' >> Dockerfile
              echo 'ENTRYPOINT ["java", "-jar", "app.jar"]' >> Dockerfile
              mv /mnt/calculator-0.0.1-SNAPSHOT.jar .
              /kaniko/executor --context `pwd` --destination ktarulis/env.IMAGE
            '''
          }
        }
      }
      echo 'End: tests pass!'
    }
    failure  { echo 'End: tests fail!' }
    unstable { echo 'End: run is unstable!' }
    changed  { echo 'End: pipeline run changed!' }
  }
}
